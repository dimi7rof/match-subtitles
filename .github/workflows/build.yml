name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        type: string
        default: '1.0.0'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Get latest release version
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            let latest = '1.0.0';
            if (releases.data.length > 0) {
              const tag = releases.data[0].tag_name.replace(/^v/, '');
              latest = tag;
            }
            core.setOutput('latest', latest);

      - name: Calculate next patch version
        id: next_version
        run: |
          latest="${{ steps.get_latest_release.outputs.latest }}"
          IFS='.' read -r major minor patch <<< "$latest"
          if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
            next_version="1.0.1"
          else
            patch=$((patch + 1))
            next_version="$major.$minor.$patch"
          fi
          echo "next_version=$next_version" >> $GITHUB_OUTPUT

      - name: Set release version
        id: set_version
        run: |
          if [[ "${{ github.event.inputs.version }}" == "" ]]; then
            version="${{ steps.next_version.outputs.next_version }}"
          else
            version="${{ github.event.inputs.version }}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained true -o publish

      - name: Archive published app
        run: Compress-Archive -Path publish\* -DestinationPath app.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set_version.outputs.version }}
          name: Release v${{ steps.set_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set_version.outputs.version }}
          files: app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
